class App;
target, running, pollevent, update, clock, draw, constructor


class Game;
tilesize,palye;..update,draw


m_name
UpdateGame()


class{ 
public func
	constructor

	pro

	pri

private var
prot var
pub var

}

#include <memory>

class Platform {
private:
	sf::RectangleShape hitbox; 
	sf::Sprite* img; // std::vector<Sprite> img;
	bool isSingle; - 

public:
	Platform(sf::Vector2f, sf::Vector2f);
	~Platform();

	bool isHit(sf::FloatRect);
	void move(sf::Vector2f);

	sf::FloatRect getGlobalBounds();

	sf::RectangleShape& getHitbox();

	void updateSprite();
	void loadTiles(sf::Vector2f&, std::unordered_map<std::string, sf::Texture>&);

	static std::vector<Platform> plats;
	static void add(sf::Vector2f,sf::Vector2f, sf::Vector2f&, std::unordered_map<std::string, sf::Texture>&);
	static void drawAll(sf::RenderWindow&);
	static void deleteAll();
};

/////////////////////////////////////////////////////\ 7-9-21 /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

class Collision:
	getglobal & local bounds
	
	vector<Collision*> allCollidables

	protected:
		updateCollisionBounds

	private:
	floatrect hitbox


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//sf::Vector2f dis;

	{/*
		addForce(moveDir * sf::Vector2f(5, 5));

		// reinitialise acceleration
		m_acc.x = 0;
		m_acc.y = m_gravity.y;

		// add force, reinitialise force
		m_acc += m_force;
		m_force = { 0, 0 };

		{ // stop oscillations
			sf::Vector2f initAccDir = unitVec(m_acc);

			m_acc.x -= m_vel.x * m_friction.x; // apply friction wrt to velocity in opposite direction to accelreation

			sf::Vector2f finAccDir = unitVec(m_acc);
			if (initAccDir.x * finAccDir.x < 0)m_acc.x = 0;
		}

		sf::Vector2f velDir(unitVec(m_vel)); // direction of velocity
		m_vel.y = velDir.y * std::min(abs(m_vel.y), m_max_vel.y); // limit velocity to maximum
		m_vel.x = velDir.x * std::min(abs(m_vel.x), m_max_vel.x); // limit velocity to maximum

		dis = m_vel + (m_acc * dt * dt) / 2.0f; // calculate displacement

		if (abs(m_vel.x) < 0.015) m_vel.x = 0;
		if (abs(m_vel.y) < 0.015) m_vel.y = 0;

		// new velocity is zero but state was RUNNING
		if (abs(m_vel.x) < 0.1 && m_currState != IDLE) {
			m_currAnim.setTextureRect_allFrames(sf::IntRect(0, 0, m_ninja.getSize().x, m_ninja.getSize().y / 2));
			m_currAnim.reset();
			m_currState = IDLE;
		}
		// new velocity is non zero but state was IDLE
		else if (abs(m_vel.x) >= 0.1 && m_currState != RUNNING) {
			m_currAnim.setTextureRect_allFrames(sf::IntRect(0, m_ninja.getSize().y / 2, m_ninja.getSize().x, m_ninja.getSize().y / 2));
			m_currAnim.reset();
			m_currState = RUNNING;
			m_currAnim.setInverted(m_vel.x < 0, 0);
		}

		m_vel += m_acc * dt; // calculate velocity for next frame
	*/} // old code


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////



	{
		//check Collision
		move(-this->m_vel);
		{
			for (auto it = Enemy::m_enemies.begin(); it != Enemy::m_enemies.end(); it++) {
				move(this->m_vel);
				bool haveCollided = (*it)->getGlobalBounds().intersects(this->getGlobalBounds()) && (!(*it)->get_dead()) && !m_playerDying;
				move(-this->m_vel);
				if (!haveCollided)continue;

				sf::FloatRect enemy = (*it)->getGlobalBounds();
				sf::FloatRect playerBox(getGlobalBounds());

				bool regionTOP = false;
				if (playerBox.top + playerBox.height <= enemy.top)
				{
					if (playerBox.left > enemy.left + enemy.width)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(playerBox.left - enemy.left - enemy.width, enemy.top - playerBox.top - playerBox.height);
						if (ratio.x < ratio.y) regionTOP = true;
					}
					else if (playerBox.left + playerBox.width < enemy.left)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(enemy.left - playerBox.left - playerBox.width, enemy.top - playerBox.top - playerBox.height);
						if (ratio.x < ratio.y) regionTOP = true;
					}
					else regionTOP = true;
				}
				if (regionTOP) {
					m_vel.y = -1.0f;
					(*it)->die();
				}
				else {
					m_playerDying = true;
				}
			}
			for (auto it = Collidable::allCollidables.begin(); it != Collidable::allCollidables.end(); it++) {
				move(this->m_vel);
				bool haveCollided = areColliding(getGlobalBounds(), **it);
				move(-this->m_vel);
				if (!haveCollided) {
					continue;
				}
				else {
					if ((*it)->getID() == Collidable::OBSTACLE) m_playerDying = true;
				}

				sf::FloatRect plat = (*it)->getGlobalBounds();
				sf::FloatRect playerBox(getGlobalBounds());

				// 0-top, 1-right, 2-bottom, 3-left
				enum Region { TOP, RIGHT, BOTTOM, LEFT } region;
				//region = BOTTOM;

				if (playerBox.top >= plat.top + plat.height)
				{
					if (playerBox.left > plat.left + plat.width)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(playerBox.left - plat.left - plat.width, playerBox.top - plat.top - plat.height);
						if (ratio.x < ratio.y) region = BOTTOM;
						else region = RIGHT;
					}
					else if (playerBox.left + playerBox.width < plat.left)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(plat.left - playerBox.left - playerBox.width, playerBox.top - plat.top - plat.height);
						if (ratio.x < ratio.y) region = BOTTOM;
						else region = LEFT;
					}
					else region = BOTTOM;
				}
				else if (playerBox.top + playerBox.height <= plat.top)
				{
					if (playerBox.left > plat.left + plat.width)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(playerBox.left - plat.left - plat.width, plat.top - playerBox.top - playerBox.height);
						if (ratio.x < ratio.y) region = TOP;
						else region = RIGHT;
					}
					else if (playerBox.left + playerBox.width < plat.left)
					{
						sf::Vector2f ratio = this->m_vel / sf::Vector2f(plat.left - playerBox.left - playerBox.width, plat.top - playerBox.top - playerBox.height);
						if (ratio.x < ratio.y) region = TOP;
						else region = LEFT;
					}
					else region = TOP;
				}

				else if (playerBox.left >= plat.left + plat.width)
				{
					if (playerBox.top + playerBox.height >= plat.top && playerBox.top <= plat.top + plat.height)
						region = RIGHT;
				}
				else if (playerBox.left + playerBox.width <= plat.left)
				{
					if (playerBox.top + playerBox.height >= plat.top && playerBox.top <= plat.top + plat.height)
						region = LEFT;
				}


				if (region == TOP || region == BOTTOM)
				{
					this->m_vel.y = 0;
					if (region == TOP) setPosition(getPosition().x, plat.top - playerBox.height);
					else if (region == BOTTOM) setPosition(getPosition().x, plat.top + plat.height);
				}
				else if (region == LEFT || region == RIGHT)
				{
					this->m_vel.x = 0;
					if (region == LEFT) setPosition(plat.left - playerBox.width, getPosition().y);
					else if (region == RIGHT) setPosition(plat.left + plat.width, getPosition().y);
				}
			}
		}

		move(this->m_vel.x, this->m_vel.y);
	}


	move(-this->m_vel.x * moveDir, -this->m_vel.y);
	{
		for (auto it = Collidable::allCollidables.begin(); it != Collidable::allCollidables.end(); it++) {
			move(this->m_vel.x * moveDir, this->m_vel.y);
			bool haveCollided = areColliding(getGlobalBounds(), **it);
			move(-this->m_vel.x * moveDir, -this->m_vel.y);
			if (!haveCollided) {
				continue;
			}
			else {
				if ((*it)->getID() == Collidable::OBSTACLE) die();
			}

			sf::FloatRect plat = (*it)->getGlobalBounds();
			sf::FloatRect playerBox(getGlobalBounds());

			// 0-top, 1-right, 2-bottom, 3-left
			enum Region { TOP, RIGHT, BOTTOM, LEFT } region;
			region = BOTTOM;

			if (playerBox.top >= plat.top + plat.height)
			{
				if (playerBox.left > plat.left + plat.width)
				{
					sf::Vector2f ratio = this->m_vel / sf::Vector2f(playerBox.left - plat.left - plat.width, playerBox.top - plat.top - plat.height);
					if (ratio.x < ratio.y) region = BOTTOM;
					else region = RIGHT;
				}
				else if (playerBox.left + playerBox.width < plat.left)
				{
					sf::Vector2f ratio = this->m_vel / sf::Vector2f(plat.left - playerBox.left - playerBox.width, playerBox.top - plat.top - plat.height);
					if (ratio.x < ratio.y) region = BOTTOM;
					else region = LEFT;
				}
				else region = BOTTOM;
			}
			else if (playerBox.top + playerBox.height <= plat.top)
			{
				if (playerBox.left > plat.left + plat.width)
				{
					sf::Vector2f ratio = this->m_vel / sf::Vector2f(playerBox.left - plat.left - plat.width, plat.top - playerBox.top - playerBox.height);
					if (ratio.x < ratio.y) region = TOP;
					else region = RIGHT;
				}
				else if (playerBox.left + playerBox.width < plat.left)
				{
					sf::Vector2f ratio = this->m_vel / sf::Vector2f(plat.left - playerBox.left - playerBox.width, plat.top - playerBox.top - playerBox.height);
					if (ratio.x < ratio.y) region = TOP;
					else region = LEFT;
				}
				else region = TOP;
			}

			else if (playerBox.left >= plat.left + plat.width)
			{
				if (playerBox.top + playerBox.height >= plat.top && playerBox.top <= plat.top + plat.height)
					region = RIGHT;
			}
			else if (playerBox.left + playerBox.width <= plat.left)
			{
				if (playerBox.top + playerBox.height >= plat.top && playerBox.top <= plat.top + plat.height)
					region = LEFT;
			}


			if (region == TOP || region == BOTTOM)
			{
				this->m_vel.y = 0;
				if (region == TOP) setPosition(getPosition().x, plat.top - playerBox.height);
				else if (region == BOTTOM) setPosition(getPosition().x, plat.top + plat.height);
			}
			else if (region == LEFT || region == RIGHT)
			{
				/*this->m_vel.x = 0;*/
				if (region == LEFT) {
					setPosition(plat.left - playerBox.width, getPosition().y);
					moveDir = -1;
					m_currAnim.setInverted(false, false);
				}
				else if (region == RIGHT) {
					setPosition(plat.left + plat.width, getPosition().y);
					moveDir = 1;
					m_currAnim.setInverted(true, false);
				}
			}
		}
	}

	move(this->m_vel.x * moveDir, this->m_vel.y);